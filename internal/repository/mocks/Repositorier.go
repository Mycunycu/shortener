// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Mycunycu/shortener/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Repositorier is an autogenerated mock type for the Repositorier type
type Repositorier struct {
	mock.Mock
}

// GetByOriginalURL provides a mock function with given fields: _a0, _a1
func (_m *Repositorier) GetByOriginalURL(_a0 context.Context, _a1 string) (models.ShortenEty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 models.ShortenEty
	if rf, ok := ret.Get(0).(func(context.Context, string) models.ShortenEty); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.ShortenEty)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByShortID provides a mock function with given fields: _a0, _a1
func (_m *Repositorier) GetByShortID(_a0 context.Context, _a1 string) (models.ShortenEty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 models.ShortenEty
	if rf, ok := ret.Get(0).(func(context.Context, string) models.ShortenEty); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.ShortenEty)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: _a0, _a1
func (_m *Repositorier) GetByUserID(_a0 context.Context, _a1 string) ([]models.ShortenEty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []models.ShortenEty
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.ShortenEty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ShortenEty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PingDB provides a mock function with given fields: _a0
func (_m *Repositorier) PingDB(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: _a0, _a1
func (_m *Repositorier) Save(_a0 context.Context, _a1 models.ShortenEty) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ShortenEty) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveBatch provides a mock function with given fields: _a0, _a1
func (_m *Repositorier) SaveBatch(_a0 context.Context, _a1 []models.ShortenEty) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.ShortenEty) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
